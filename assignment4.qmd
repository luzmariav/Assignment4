---
title: "Assignment 4"
subtitle: "Due at 11:59pm on November 7."
format: pdf
editor: visual
---

Github: https://github.com/luzmariav/Assignment4

```{r}
#| include: false 
library(tidyverse)
library(DBI)
library(dbplyr)
library(bigrquery)
```

```{r}
project <- 'surv727-403119'
```

We will connect to a public database, the Chicago crime database, which has data on crime in Chicago.

```{r}
con <- dbConnect(
  bigrquery::bigquery(),
  project = "bigquery-public-data",
  dataset = "chicago_crime",
  billing = project
)
con
```

We can look at the available tables in this database using `dbListTables`.

**Note**: When you run this code, you will be sent to a browser and have to give Google permissions to Tidyverse API Packages. **Make sure you select all to give access or else your code will not run.**

```{r}
dbListTables(con)
```

Information on the \`crime\` table can be found here:

<https://cloud.google.com/bigquery/public-data/chicago-crime-data>

Write a first query that counts the number of rows of the \`crime\` table in the year 2016. Use code chunks with {sql connection = con} in order to write SQL code within the document.

```{sql connection= con}
SELECT count(*) AS row_count
FROM crime
WHERE EXTRACT(YEAR FROM date) = 2016

```

There are 269840 rows.

Next, count the number of arrests grouped by `primary_type` in 2016. Note that is a somewhat similar task as above, with some adjustments on which rows should be considered. Sort the results, i.e. list the number of arrests in a descending order.

```{sql connection= con}
SELECT primary_type, count(*) as arrestnum
FROM crime
WHERE year = 2016 and arrest= True
Group by primary_type
order by arrestnum desc

```

The most common arrests were for narcotics and battery which had more than 10,000 hits.

We can also use the `date` for grouping. Count the number of arrests grouped by hour of the day in 2016. You can extract the latter information from `date` via `EXTRACT(HOUR FROM date)`. Which time of the day is associated with the most arrests?

```{sql connection= con}

SELECT EXTRACT(HOUR FROM date) AS timeofday, COUNT(*) as arrests
FROM crime
WHERE year= 2016 and arrest= True
Group by timeofday
order by arrests desc
limit 10

```

The time of day that had highest number of arrests are 10 and 11 which had more than 5,000 hits.

Focus only on `HOMICIDE` and count the number of arrests for this incident type, grouped by year. List the results in descending order.

```{sql connection= con}
select year, count(*) as arrestnum
from crime
where primary_type = 'HOMICIDE' and arrest = TRUE
group by year
order by arrestnum desc

```

The years that had the highest homicide arrests were 2001 and 2002 which had more than 400 hits.

Find out which districts have the highest numbers of arrests in 2015 and 2016. That is, count the number of arrests in 2015 and 2016, grouped by year and district. List the results in descending order.

```{sql connection= con}
select district , count(*) as arrestnum
from crime
where year= 2015 or year =2016
group by district, year  
order by arrestnum desc


```

In 2015 and 2016, the districts that had the highest arrest numbers were districts 11, 8, and 6 which had more than 16000 hits.

Lets switch to writing queries from within R via the `DBI` package. Create a query object that counts the number of arrests grouped by `primary_type` of district 11 in year 2016. The results should be displayed in descending order.

Execute the query.

```{r}
distric11 <- "SELECT primary_type, count(*) as arrestnum
              FROM crime
              WHERE year = 2016 and arrest= True and district = 11
              Group by primary_type
              order by arrestnum desc"
district11sql <- dbGetQuery(con, distric11)


```

```{r echo = FALSE}
head(district11sql)
```

Try to write the very same query, now using the `dbplyr` package. For this, you need to first map the `crime` table to a tibble object in R.

```{r results="hide"}
sql <- "SELECT * 
        FROM `crime` "
dbGetQuery(con, sql)
subtable <- dbGetQuery(con, sql)
str(subtable)

head(subtable)
```

```{r }
subtable1 <- subtable %>% 
  filter(year==2016, arrest=="TRUE", district == 11 ) %>% 
  group_by(primary_type) %>%
  summarize(counts =n()) %>% 
  arrange(desc(counts))

results <- collect(subtable1)

```

```{r echo = FALSE}

head(subtable1)
```

Again, count the number of arrests grouped by `primary_type` of district 11 in year 2016, now using `dplyr` syntax.

```{r}
subtable2 <- subtable %>% 
  filter(year==2016, arrest=="TRUE", district == 11 ) %>% 
  group_by(primary_type) %>%
  summarize(counts =n()) %>% 
  arrange(desc(counts))


```

```{r echo = FALSE}
head(subtable2)
```

In all three versions to find the number number of arrests based on the type and the year 2016, had the same results.

Count the number of arrests grouped by `primary_type` and `year`, still only for district 11. Arrange the result by `year`.

```{r}
subtable3 <- subtable %>% 
  filter(arrest=="TRUE", district == 11 ) %>% 
  group_by(primary_type, year) %>%
  summarize(counts =n()) %>% 
  arrange(desc(year))

```

```{r echo = FALSE}

head(subtable3)
```

Assign the results of the query above to a local R object.

```{r}
subtable4 <- collect(subtable3)
```

Confirm that you pulled the data to the local environment by displaying the first ten rows of the saved data set.

```{r}

head(subtable4, 10)

```

Close the connection.

```{r}
dbDisconnect(con)
```
